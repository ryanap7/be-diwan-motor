// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN
  CASHIER
  BRANCH_MANAGER
}

enum BranchStatus {
  DRAFT
  PENDING
  ACTIVE
  INACTIVE
  CLOSED
}

// ============================================
// BRANCH MANAGEMENT
// ============================================

model Branch {
  id              String       @id @default(uuid())
  code            String       @unique
  name            String
  address         String       @db.Text
  city            String
  province        String
  postalCode      String
  phone           String
  email           String
  
  operatingHours  Json?
  
  status          BranchStatus @default(DRAFT)
  isActive        Boolean      @default(false)
  
  managerId       String?      @unique
  cashierId       String?      @unique
  
  activatedAt     DateTime?
  deactivatedAt   DateTime?
  closedAt        DateTime?
  
  notes           String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?

  users           User[]
  manager         User?        @relation("BranchManager", fields: [managerId], references: [id], onDelete: SetNull)
  cashier         User?        @relation("BranchCashier", fields: [cashierId], references: [id], onDelete: SetNull)

  @@index([code])
  @@index([status])
  @@index([isActive])
  @@index([managerId])
  @@index([cashierId])
  @@index([city])
  @@index([province])
  @@index([status, isActive])
  @@index([deletedAt])
  @@map("branches")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  fullName  String
  phone     String?
  role      UserRole @default(CASHIER)
  isActive  Boolean  @default(true)
  branchId  String?
  
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  branch            Branch?            @relation(fields: [branchId], references: [id], onDelete: Restrict)
  managedBranch     Branch?            @relation("BranchManager")
  primaryCashierAt  Branch?            @relation("BranchCashier")
  
  refreshTokens     RefreshToken[]

  @@index([username])
  @@index([email])
  @@index([branchId])
  @@index([role])
  @@index([isActive, role])
  @@index([deletedAt])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ============================================
// PRODUCT MANAGEMENT - CATEGORY
// ============================================

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  
  // Nested Category (Self-referencing)
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryHierarchy")
  
  // Display & Ordering
  sortOrder   Int       @default(0)
  
  // Status
  isActive    Boolean   @default(true)
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete
  
  // Relations
  brands      Brand[]
  products    Product[]

  @@index([parentId])
  @@index([isActive])
  @@index([slug])
  @@index([sortOrder])
  @@index([parentId, isActive])
  @@index([deletedAt])
  @@map("categories")
}

// ============================================
// PRODUCT MANAGEMENT - BRAND
// ============================================

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  logo        String?   // Logo URL
  
  // Category association
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Status
  isActive    Boolean   @default(true)
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  // Relations
  products    Product[]

  @@index([categoryId])
  @@index([isActive])
  @@index([slug])
  @@index([deletedAt])
  @@map("brands")
}

// ============================================
// PRODUCT MANAGEMENT - PRODUCT
// ============================================

model Product {
  id            String    @id @default(uuid())
  sku           String    @unique
  name          String
  slug          String    @unique
  description   String?   @db.Text
  
  // Category & Brand
  categoryId    String
  brandId       String?
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  brand         Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  
  // Pricing
  purchasePrice Decimal   @db.Decimal(15, 2)
  sellingPrice  Decimal   @db.Decimal(15, 2)
  discount      Decimal?  @default(0) @db.Decimal(5, 2) // Percentage
  
  // Stock
  minStock      Int       @default(0)
  
  // Product Details
  unit          String    @default("PCS") // Unit satuan (PCS, BOX, KG, dll)
  weight        Decimal?  @db.Decimal(10, 2) // in grams
  dimensions    Json?     // {length, width, height}
  
  // Images
  images        Json?     // Array of image URLs
  mainImage     String?
  
  // Status
  isActive      Boolean   @default(true)
  isFeatured    Boolean   @default(false)
  
  // Metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@index([sku])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([slug])
  @@index([categoryId, isActive])
  @@index([brandId, isActive])
  @@index([deletedAt])
  @@map("products")
}
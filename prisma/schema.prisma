// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// USER & AUTHENTICATION
// =====================================================

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  phone     String?
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchaseOrders  PurchaseOrder[]
  stockMovements  StockMovement[]
  salesOrders     SalesOrder[]

  @@index([email])
  @@index([isActive])
  @@map("users")
}

// =====================================================
// PRODUCT & CATEGORY
// =====================================================

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  sku         String   @unique
  name        String
  slug        String   @unique
  description String?  @db.Text
  categoryId  String
  
  // Pricing
  costPrice      Decimal @db.Decimal(15, 2)
  sellingPrice   Decimal @db.Decimal(15, 2)
  
  // Stock
  currentStock   Int     @default(0)
  minimumStock   Int     @default(0)
  maximumStock   Int?
  unit           String  @default("pcs") // pcs, kg, liter, meter, etc
  
  // Product info
  brand          String?
  model          String?
  location       String? // Lokasi penyimpanan di gudang
  
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  category          Category            @relation(fields: [categoryId], references: [id])
  purchaseOrderItems PurchaseOrderItem[]
  stockMovements    StockMovement[]
  salesOrderItems   SalesOrderItem[]

  @@index([sku])
  @@index([slug])
  @@index([categoryId])
  @@index([isActive])
  @@index([currentStock])
  @@index([name]) // For search
  @@map("products")
}

// =====================================================
// SUPPLIER
// =====================================================

model Supplier {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  email       String?
  phone       String
  address     String?  @db.Text
  city        String?
  province    String?
  postalCode  String?
  contactPerson String?
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  purchaseOrders PurchaseOrder[]

  @@index([code])
  @@index([isActive])
  @@index([name]) // For search
  @@map("suppliers")
}

// =====================================================
// PURCHASE ORDER
// =====================================================

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  RECEIVED
  CANCELLED
}

model PurchaseOrder {
  id              String              @id @default(uuid())
  orderNumber     String              @unique
  supplierId      String
  userId          String
  orderDate       DateTime            @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  
  subtotal        Decimal             @db.Decimal(15, 2)
  tax             Decimal             @default(0) @db.Decimal(15, 2)
  discount        Decimal             @default(0) @db.Decimal(15, 2)
  shippingCost    Decimal             @default(0) @db.Decimal(15, 2)
  total           Decimal             @db.Decimal(15, 2)
  
  status          PurchaseOrderStatus @default(PENDING)
  notes           String?             @db.Text
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  supplier  Supplier              @relation(fields: [supplierId], references: [id])
  user      User                  @relation(fields: [userId], references: [id])
  items     PurchaseOrderItem[]

  @@index([orderNumber])
  @@index([supplierId])
  @@index([userId])
  @@index([status])
  @@index([orderDate])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String   @id @default(uuid())
  purchaseOrderId String
  productId       String
  
  quantity        Int
  unitPrice       Decimal  @db.Decimal(15, 2)
  subtotal        Decimal  @db.Decimal(15, 2)
  
  receivedQty     Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@index([purchaseOrderId])
  @@index([productId])
  @@map("purchase_order_items")
}

// =====================================================
// STOCK MOVEMENT
// =====================================================

enum StockMovementType {
  IN          // Stock masuk
  OUT         // Stock keluar
  ADJUSTMENT  // Penyesuaian stock
  RETURN      // Retur
}

model StockMovement {
  id              String            @id @default(uuid())
  referenceNumber String            @unique
  productId       String
  userId          String
  
  type            StockMovementType
  quantity        Int
  
  // Stock before and after
  stockBefore     Int
  stockAfter      Int
  
  unitPrice       Decimal?          @db.Decimal(15, 2)
  totalValue      Decimal?          @db.Decimal(15, 2)
  
  notes           String?           @db.Text
  referenceId     String?           // ID dari purchase order, sales order, dll
  referenceType   String?           // 'PURCHASE', 'SALE', 'ADJUSTMENT', 'RETURN'
  
  movementDate    DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([referenceNumber])
  @@index([productId])
  @@index([userId])
  @@index([type])
  @@index([movementDate])
  @@index([referenceId, referenceType])
  @@map("stock_movements")
}

// =====================================================
// CUSTOMER & SALES ORDER (Optional)
// =====================================================

model Customer {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  email       String?
  phone       String
  address     String?  @db.Text
  city        String?
  province    String?
  postalCode  String?
  notes       String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  salesOrders SalesOrder[]

  @@index([code])
  @@index([isActive])
  @@index([name]) // For search
  @@map("customers")
}

enum SalesOrderStatus {
  DRAFT
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
}

model SalesOrder {
  id            String           @id @default(uuid())
  orderNumber   String           @unique
  customerId    String
  userId        String
  orderDate     DateTime         @default(now())
  
  subtotal      Decimal          @db.Decimal(15, 2)
  tax           Decimal          @default(0) @db.Decimal(15, 2)
  discount      Decimal          @default(0) @db.Decimal(15, 2)
  total         Decimal          @db.Decimal(15, 2)
  
  paidAmount    Decimal          @default(0) @db.Decimal(15, 2)
  
  status        SalesOrderStatus @default(DRAFT)
  paymentStatus PaymentStatus    @default(UNPAID)
  notes         String?          @db.Text
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  customer Customer          @relation(fields: [customerId], references: [id])
  user     User              @relation(fields: [userId], references: [id])
  items    SalesOrderItem[]

  @@index([orderNumber])
  @@index([customerId])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderDate])
  @@map("sales_orders")
}

model SalesOrderItem {
  id            String   @id @default(uuid())
  salesOrderId  String
  productId     String
  
  quantity      Int
  unitPrice     Decimal  @db.Decimal(15, 2)
  subtotal      Decimal  @db.Decimal(15, 2)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])

  @@index([salesOrderId])
  @@index([productId])
  @@map("sales_order_items")
}
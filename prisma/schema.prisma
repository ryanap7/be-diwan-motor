// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN
  CASHIER
  BRANCH_MANAGER
}

enum BranchStatus {
  DRAFT
  PENDING
  ACTIVE
  INACTIVE
  CLOSED
}

// ============================================
// BRANCH MANAGEMENT
// ============================================

model Branch {
  id              String       @id @default(uuid())
  code            String       @unique
  name            String
  address         String       @db.Text
  city            String
  province        String
  postalCode      String
  phone           String
  email           String
  
  operatingHours  Json?
  
  status          BranchStatus @default(DRAFT)
  isActive        Boolean      @default(false)
  
  managerId       String?      @unique
  cashierId       String?      @unique
  
  activatedAt     DateTime?
  deactivatedAt   DateTime?
  closedAt        DateTime?
  
  notes           String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?

  users           User[]
  manager         User?        @relation("BranchManager", fields: [managerId], references: [id], onDelete: SetNull)
  cashier         User?        @relation("BranchCashier", fields: [cashierId], references: [id], onDelete: SetNull)

  @@index([code])
  @@index([status])
  @@index([isActive])
  @@index([managerId])
  @@index([cashierId])
  @@index([city])
  @@index([province])
  @@index([status, isActive])
  @@index([deletedAt])
  @@map("branches")
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  fullName  String
  phone     String?
  role      UserRole @default(CASHIER)
  isActive  Boolean  @default(true)
  branchId  String?
  
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  branch            Branch?            @relation(fields: [branchId], references: [id], onDelete: Restrict)
  managedBranch     Branch?            @relation("BranchManager")
  primaryCashierAt  Branch?            @relation("BranchCashier")
  
  refreshTokens     RefreshToken[]

  @@index([username])
  @@index([email])
  @@index([branchId])
  @@index([role])
  @@index([isActive, role])
  @@index([deletedAt])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ============================================
// PRODUCT MANAGEMENT - CATEGORY
// ============================================

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  
  // Nested Category (Self-referencing)
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryHierarchy")
  
  // Display & Ordering
  sortOrder   Int       @default(0)
  
  // Status
  isActive    Boolean   @default(true)
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete
  
  // Relations
  products    Product[]

  @@index([parentId])
  @@index([isActive])
  @@index([slug])
  @@index([sortOrder])
  @@index([parentId, isActive])
  @@index([deletedAt])
  @@map("categories")
}

// ============================================
// PRODUCT MANAGEMENT - BRAND
// ============================================

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?   @db.Text
  
  // Status
  isActive    Boolean   @default(true)
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  // Relations
  products    Product[]

  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
  @@map("brands")
}

// ============================================
// PRODUCT MANAGEMENT - PRODUCT
// ============================================

model Product {
  id              String    @id @default(uuid())
  
  // Product Identification
  sku             String    @unique // Part Number
  barcode         String?   @unique
  name            String
  slug            String    @unique
  description     String?   @db.Text
  
  // Category & Brand
  categoryId      String
  brandId         String?
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  brand           Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  
  // Unit of Measurement
  unit            String    @default("PCS") // PCS, Unit, Box, Lusin, Karton, Kg, Liter, Meter, Set
  
  // Compatible Vehicle Models
  compatibleModels String?  @db.Text // Comma-separated values
  
  // Pricing
  purchasePrice   Decimal   @db.Decimal(15, 2) // Harga Beli
  sellingPrice    Decimal   @db.Decimal(15, 2) // Harga Normal
  wholesalePrice  Decimal?  @db.Decimal(15, 2) // Harga Grosir 
  
  // Discount/Promo
  hasDiscount     Boolean   @default(false)
  discountPercent Decimal?  @default(0) @db.Decimal(5, 2) // Percentage (0-100)
  discountPrice   Decimal?  @db.Decimal(15, 2) // Final price after discount
  
  // Stock Management
  minStock        Int       @default(0)
  
  // Product Details
  weight          Decimal?  @db.Decimal(10, 2) // in grams
  dimensions      Json?     // {length, width, height}
  
  // Technical Specifications
  specifications  Json?     // Free-form technical specs
  
  // Storage & Organization
  storageLocation String?   // Lokasi Penyimpanan
  tags            String?   @db.Text // Comma-separated tags
  
  // Images (Max 3)
  images          Json?     // Array of image URLs (max 3)
  mainImage       String?   // Primary image
  
  // Status
  isActive        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete

  @@index([sku])
  @@index([barcode])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([slug])
  @@index([hasDiscount])
  @@index([categoryId, isActive])
  @@index([brandId, isActive])
  @@index([deletedAt])
  @@map("products")
}

// ============================================
// SUPPLIER MANAGEMENT
// ============================================

model Supplier {
  id              String    @id @default(uuid())
  
  // Supplier Information
  name            String    @unique
  contactPerson   String?
  phone           String
  email           String?
  address         String    @db.Text
  
  // Business Terms
  paymentTerms    String?   @db.Text // Net 30 days, COD, dll
  deliveryTerms   String?   @db.Text // FOB, CIF, dll
  
  // Additional Info
  notes           String?   @db.Text
  
  // Status
  isActive        Boolean   @default(true)
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete

  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
  @@map("suppliers")
}

// ============================================
// CUSTOMER MANAGEMENT
// ============================================

model Customer {
  id              String    @id @default(uuid())
  
  // Customer Information
  name            String
  phone           String
  email           String?
  address         String?   @db.Text
  
  // Additional Info
  notes           String?   @db.Text
  
  // Status
  isActive        Boolean   @default(true)
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete

  @@index([name])
  @@index([phone])
  @@index([isActive])
  @@index([deletedAt])
  @@map("customers")
}
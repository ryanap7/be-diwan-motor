// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk Role
enum UserRole {
  ADMIN
  CASHIER
  BRANCH_MANAGER
}

// Enum untuk Branch Status
enum BranchStatus {
  DRAFT           // Belum lengkap (belum ada manager & cashier)
  PENDING         // Sudah lengkap, menunggu aktivasi
  ACTIVE          // Sudah aktif dan operasional
  INACTIVE        // Dinonaktifkan sementara
  CLOSED          // Ditutup permanen
}

// Model Branch (Cabang)
model Branch {
  id              String       @id @default(uuid())
  code            String       @unique
  name            String
  address         String       @db.Text
  city            String
  province        String
  postalCode      String
  phone           String
  email           String
  
  // Jam Operasional (stored as JSON or separate fields)
  operatingHours  Json?        // {monday: {open: "08:00", close: "17:00"}, ...}
  
  // Status Management
  status          BranchStatus @default(DRAFT)
  isActive        Boolean      @default(false)
  
  // Assignment tracking
  managerId       String?      @unique // One branch = one manager
  cashierId       String?      @unique // One branch = one cashier (‚ùó diperbaiki di sini)
  
  // Activation tracking
  activatedAt     DateTime?
  deactivatedAt   DateTime?
  closedAt        DateTime?
  
  // Metadata
  notes           String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?    // Soft delete

  // Relations
  users           User[]
  manager         User?        @relation("BranchManager", fields: [managerId], references: [id], onDelete: SetNull)
  cashier         User?        @relation("BranchCashier", fields: [cashierId], references: [id], onDelete: SetNull)

  @@index([code])
  @@index([status])
  @@index([isActive])
  @@index([managerId])
  @@index([cashierId])
  @@index([city])
  @@index([province])
  @@index([status, isActive])
  @@index([deletedAt])
  @@map("branches")
}

// Model User
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  fullName  String
  phone     String?
  role      UserRole @default(CASHIER)
  isActive  Boolean  @default(true)
  branchId  String?
  
  // Metadata
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  branch            Branch?            @relation(fields: [branchId], references: [id], onDelete: Restrict)
  managedBranch     Branch?            @relation("BranchManager")
  primaryCashierAt  Branch?            @relation("BranchCashier")
  
  refreshTokens     RefreshToken[]

  @@index([username])
  @@index([email])
  @@index([branchId])
  @@index([role])
  @@index([isActive, role])
  @@index([deletedAt])
  @@map("users")
}

// Model untuk Refresh Token (JWT)
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}
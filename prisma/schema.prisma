// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN
  CASHIER
  BRANCH_MANAGER
}

enum BranchStatus {
  DRAFT
  PENDING
  ACTIVE
  INACTIVE
  CLOSED
}

enum StockMovementType {
  IN
  OUT
  TRANSFER
  ADJUSTMENT
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum ActivityAction {
  // Authentication
  LOGIN
  LOGOUT
  REFRESH_TOKEN
  
  // CRUD Operations
  CREATE
  READ
  UPDATE
  DELETE
  
  // Purchase Order Specific
  SUBMIT_PO
  APPROVE_PO
  RECEIVE_PO
  CANCEL_PO
  
  // Stock Operations
  STOCK_IN
  STOCK_OUT
  STOCK_TRANSFER
  STOCK_ADJUSTMENT
  
  // Branch Operations
  ACTIVATE_BRANCH
  DEACTIVATE_BRANCH
  CLOSE_BRANCH
  
  // Product Operations
  UPDATE_PROMO
  ACTIVATE_PRODUCT
  DEACTIVATE_PRODUCT
  
  // Other Operations
  IMPORT
  EXPORT
  BULK_UPDATE
  BULK_DELETE
}

enum EntityType {
  USER
  BRANCH
  PRODUCT
  CATEGORY
  BRAND
  STOCK
  PURCHASE_ORDER
  SUPPLIER
  CUSTOMER
  STOCK_MOVEMENT
  AUTHENTICATION
}

// ============================================
// BRANCH MANAGEMENT
// ============================================

model Branch {
  id              String       @id @default(uuid())
  code            String       @unique
  name            String
  address         String       @db.Text
  city            String
  province        String
  postalCode      String
  phone           String
  email           String
  operatingHours  Json?
  status          BranchStatus @default(DRAFT)
  isActive        Boolean      @default(false)
  managerId       String?      @unique
  cashierId       String?      @unique
  activatedAt     DateTime?
  deactivatedAt   DateTime?
  closedAt        DateTime?
  notes           String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?

  users              User[]
  manager            User?        @relation("BranchManager", fields: [managerId], references: [id], onDelete: SetNull)
  cashier            User?        @relation("BranchCashier", fields: [cashierId], references: [id], onDelete: SetNull)
  stocks             Stock[]
  stockMovements     StockMovement[] @relation("StockMovementBranch")
  stockMovementsFrom StockMovement[] @relation("StockMovementFrom")
  stockMovementsTo   StockMovement[] @relation("StockMovementTo")
  purchaseOrders PurchaseOrder[]

  @@index([code])
  @@index([status])
  @@index([isActive])
  @@index([managerId])
  @@index([cashierId])
  @@index([city])
  @@index([province])
  @@index([status, isActive])
  @@index([deletedAt])
  @@map("branches")
}


// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  fullName  String
  phone     String?
  role      UserRole @default(CASHIER)
  isActive  Boolean  @default(true)
  branchId  String?
  
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  branch            Branch?            @relation(fields: [branchId], references: [id], onDelete: Restrict)
  managedBranch     Branch?            @relation("BranchManager")
  primaryCashierAt  Branch?            @relation("BranchCashier")
  
  refreshTokens     RefreshToken[]
  activityLogs      ActivityLog[]
  stockMovements    StockMovement[]    @relation("StockMovementUser")
  createdPurchaseOrders   PurchaseOrder[] @relation("POCreator")
  approvedPurchaseOrders  PurchaseOrder[] @relation("POApprover")
  receivedPurchaseOrders  PurchaseOrder[] @relation("POReceiver")

  @@index([username])
  @@index([email])
  @@index([branchId])
  @@index([role])
  @@index([isActive, role])
  @@index([deletedAt])
  @@map("users")
}


model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.Text
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ============================================
// PRODUCT MANAGEMENT - CATEGORY
// ============================================

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  
  // Nested Category (Self-referencing)
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryHierarchy")
  
  // Display & Ordering
  sortOrder   Int       @default(0)
  
  // Status
  isActive    Boolean   @default(true)
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete
  
  // Relations
  products    Product[]

  @@index([parentId])
  @@index([isActive])
  @@index([slug])
  @@index([sortOrder])
  @@index([parentId, isActive])
  @@index([deletedAt])
  @@map("categories")
}

// ============================================
// PRODUCT MANAGEMENT - BRAND
// ============================================

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?   @db.Text
  
  // Status
  isActive    Boolean   @default(true)
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  // Relations
  products    Product[]

  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
  @@map("brands")
}

// ============================================
// PRODUCT MANAGEMENT - PRODUCT
// ============================================

model Product {
  id              String    @id @default(uuid())
  
  // Product Identification
  sku             String    @unique // Part Number
  barcode         String?   @unique
  name            String
  slug            String    @unique
  description     String?   @db.Text
  
  // Category & Brand
  categoryId      String
  brandId         String?
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  brand           Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  
  // Unit of Measurement
  unit            String    @default("PCS") // PCS, Unit, Box, Lusin, Karton, Kg, Liter, Meter, Set
  
  // Compatible Vehicle Models
  compatibleModels String?  @db.Text // Comma-separated values
  
  // Pricing
  purchasePrice   Decimal   @db.Decimal(15, 2) // Harga Beli
  sellingPrice    Decimal   @db.Decimal(15, 2) // Harga Normal
  wholesalePrice  Decimal?  @db.Decimal(15, 2) // Harga Grosir 
  
  // Discount/Promo
  hasDiscount     Boolean   @default(false)
  discountPercent Decimal?  @default(0) @db.Decimal(5, 2)
  discountPrice   Decimal?  @db.Decimal(15, 2)
  
  // Stock Management Settings (bukan actual stock)
  minStock        Int       @default(0) // Minimum stock threshold
  
  // Product Details
  weight          Decimal?  @db.Decimal(10, 2)
  dimensions      Json?
  specifications  Json?
  storageLocation String?
  tags            String?   @db.Text
  
  // Images
  images          Json?
  mainImage       String?
  
  // Status
  isActive        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  
  // Relations
  stocks          Stock[]
  stockMovements  StockMovement[]
  purchaseOrderItems PurchaseOrderItem[]
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  @@index([sku])
  @@index([barcode])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([slug])
  @@index([deletedAt])
  @@map("products")
}

// ============================================
// INVENTORY MANAGEMENT - STOCK PER BRANCH
// ============================================

model Stock {
  id              String    @id @default(uuid())
  
  // Relations
  productId       String
  branchId        String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  branch          Branch    @relation(fields: [branchId], references: [id], onDelete: Restrict)
  
  // Stock Quantity
  quantity        Int       @default(0) // Current stock
  
  // Stock Alert Status (calculated field, bisa di-generate)
  isLowStock      Boolean   @default(false) // quantity <= product.minStock
  
  // Last Stock Activity
  lastRestockDate DateTime? // Last time stock was added
  lastSaleDate    DateTime? // Last time stock was sold
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Unique constraint: one stock record per product per branch
  @@unique([productId, branchId])
  @@index([productId])
  @@index([branchId])
  @@index([isLowStock])
  @@index([quantity])
  @@map("stocks")
}

// ============================================
// INVENTORY MANAGEMENT - PURCHASE ORDERS
// ============================================

model PurchaseOrder {
  id                String                @id @default(uuid())
  
  // PO Number (Auto-generated)
  poNumber          String                @unique // Format: PO-YYYYMMDD-XXXX
  
  // Relations
  supplierId        String
  branchId          String                // Destination branch
  supplier          Supplier              @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  branch            Branch                @relation(fields: [branchId], references: [id], onDelete: Restrict)
  
  // PO Details
  orderDate         DateTime              @default(now())
  expectedDate      DateTime?             // Expected delivery date
  receivedDate      DateTime?             // Actual delivery date
  
  // Status
  status            PurchaseOrderStatus   @default(DRAFT)
  
  // Financial
  subtotal          Decimal               @db.Decimal(15, 2)
  taxAmount         Decimal               @default(0) @db.Decimal(15, 2)
  discountAmount    Decimal               @default(0) @db.Decimal(15, 2)
  shippingCost      Decimal               @default(0) @db.Decimal(15, 2)
  totalAmount       Decimal               @db.Decimal(15, 2)
  
  // Additional Info
  notes             String?               @db.Text
  paymentTerms      String?               // e.g., "Net 30", "COD", "50% DP"
  
  // Tracking
  createdBy         String
  approvedBy        String?
  receivedBy        String?
  creator           User                  @relation("POCreator", fields: [createdBy], references: [id], onDelete: Restrict)
  approver          User?                 @relation("POApprover", fields: [approvedBy], references: [id], onDelete: Restrict)
  receiver          User?                 @relation("POReceiver", fields: [receivedBy], references: [id], onDelete: Restrict)
  
  // Items
  items             PurchaseOrderItem[]
  
  // Metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  deletedAt         DateTime?
  
  @@index([poNumber])
  @@index([supplierId])
  @@index([branchId])
  @@index([status])
  @@index([orderDate])
  @@index([createdAt])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id                String          @id @default(uuid())
  
  // Relations
  purchaseOrderId   String
  productId         String
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id], onDelete: Restrict)
  
  // Quantities
  orderedQty        Int             // Quantity ordered
  receivedQty       Int             @default(0) // Quantity received
  
  // Pricing
  unitPrice         Decimal         @db.Decimal(15, 2)
  subtotal          Decimal         @db.Decimal(15, 2) // orderedQty * unitPrice
  
  // Additional Info
  notes             String?
  
  // Metadata
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([purchaseOrderId])
  @@index([productId])
  @@map("purchase_order_items")
}

// ============================================
// INVENTORY MANAGEMENT - STOCK MOVEMENTS (History)
// ============================================

model StockMovement {
  id              String    @id @default(uuid())

  // Relations
  productId       String
  branchId        String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  branch          Branch    @relation("StockMovementBranch", fields: [branchId], references: [id], onDelete: Restrict)

  // Movement Type
  type            StockMovementType // IN, OUT, TRANSFER, ADJUSTMENT

  // Movement Details
  quantity        Int
  previousStock   Int
  newStock        Int

  // Transfer specific
  fromBranchId    String?
  toBranchId      String?
  fromBranch      Branch?   @relation("StockMovementFrom", fields: [fromBranchId], references: [id], onDelete: SetNull)
  toBranch        Branch?   @relation("StockMovementTo", fields: [toBranchId], references: [id], onDelete: SetNull)

  // Reference
  referenceType   String?
  referenceId     String?

  // Additional Info
  notes           String?   @db.Text
  reason          String?

  // User tracking
  performedBy     String
  user            User      @relation("StockMovementUser", fields: [performedBy], references: [id], onDelete: Restrict)

  // Metadata
  createdAt       DateTime  @default(now())

  @@index([productId])
  @@index([branchId])
  @@index([type])
  @@index([createdAt])
  @@index([referenceType, referenceId])
  @@map("stock_movements")
}


// ============================================
// SUPPLIER MANAGEMENT
// ============================================

model Supplier {
  id              String    @id @default(uuid())
  
  // Supplier Information
  name            String    @unique
  contactPerson   String?
  phone           String
  email           String?
  address         String    @db.Text
  
  // Business Terms
  paymentTerms    String?   @db.Text // Net 30 days, COD, dll
  deliveryTerms   String?   @db.Text // FOB, CIF, dll
  
  // Additional Info
  notes           String?   @db.Text
  
  // Status
  isActive        Boolean   @default(true)

  // Relations
  purchaseOrders  PurchaseOrder[] 
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete

  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
  @@map("suppliers")
}

// ============================================
// CUSTOMER MANAGEMENT
// ============================================

model Customer {
  id              String    @id @default(uuid())
  
  // Customer Information
  name            String
  phone           String
  email           String?
  address         String?   @db.Text
  
  // Additional Info
  notes           String?   @db.Text
  
  // Status
  isActive        Boolean   @default(true)
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete

  @@index([name])
  @@index([phone])
  @@index([isActive])
  @@index([deletedAt])
  @@map("customers")
}

// ============================================
// ACTIVITY LOG / AUDIT TRAIL
// ============================================

model ActivityLog {
  id              String         @id @default(uuid())
  
  // User Information
  userId          String?
  username        String
  userRole        String?
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Action Details
  action          ActivityAction
  entityType      EntityType
  entityId        String?        // ID of the affected entity
  entityName      String?        // Name/identifier for display
  
  // Description
  description     String         @db.Text // Human-readable description
  
  // Audit Trail (Before/After)
  beforeData      Json?          // Data before change
  afterData       Json?          // Data after change
  changes         Json?          // Specific fields that changed
  
  // Request Information
  method          String?        // HTTP method (GET, POST, PUT, etc)
  endpoint        String?        // API endpoint
  statusCode      Int?           // HTTP status code
  
  // Client Information
  ipAddress       String
  userAgent       String?        @db.Text
  
  // Additional Context
  metadata        Json?          // Any additional contextual data
  errorMessage    String?        @db.Text // If action failed
  
  // Timestamp
  createdAt       DateTime       @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([action, entityType])
  @@map("activity_logs")
}